using HarmonyLib;
using Hazel;
using Il2CppSystem.Collections.Generic;
using System;
using InnerNet;

namespace MalumMenu;

[HarmonyPatch(typeof(PlayerPhysics), nameof(PlayerPhysics.LateUpdate))]
public static class RPC_ShapeshiftPostfix
{
    //Postfix patch of PlayerPhysics.LateUpdate to open spectator menu
    public static bool isActive;
    public static void Postfix(PlayerPhysics __instance){
        if (CheatSettings.shapeshiftRPC){

            //Open spectator menu when CheatSettings.spectate is first enabled
            if (!isActive){

                //Close any player pick menus already open & their cheats
                if (Utils_PlayerPickMenu.playerpickMenu != null){
                    Utils_PlayerPickMenu.playerpickMenu.Close();
                    CheatSettings.spectate = CheatSettings.murderPlayer = CheatSettings.teleportPlayer = CheatSettings.kickPlayer = false;
                }

                List<PlayerControl> playerList = new List<PlayerControl>();

                //All players are saved to playerList apart from LocalPlayer
                foreach (var player in PlayerControl.AllPlayerControls){
                    if (!player.AmOwner){
                        playerList.Add(player);
                    }
                }

                //New player pick menu made for spectating
                Utils_PlayerPickMenu.openPlayerPickMenu(playerList, (Action) (() =>
                {
                    var HostData = AmongUsClient.Instance.GetHost();
                    if (HostData != null && !HostData.Character.Data.Disconnected){
                        foreach (var item in PlayerControl.AllPlayerControls)
                        {
                            MessageWriter messageWriter = AmongUsClient.Instance.StartRpcImmediately(PlayerControl.LocalPlayer.NetId, (byte)RpcCalls.Shapeshift, SendOption.None, AmongUsClient.Instance.GetClientIdFromCharacter(item));
                            messageWriter.WriteNetObject(Utils_PlayerPickMenu.targetPlayer);
                            messageWriter.Write(!CheatSettings.noCooldowns);
                            AmongUsClient.Instance.FinishRpcImmediately(messageWriter);
                        }
                    }
                }));

                isActive = true;

            }

            //Deactivate cheat if menu is closed without spectating anyone
            if (Utils_PlayerPickMenu.playerpickMenu == null && PlayerControl.LocalPlayer.CurrentOutfitType != PlayerOutfitType.Shapeshifted && !PlayerControl.LocalPlayer.shapeshifting){
                CheatSettings.shapeshiftRPC = false;
            }
        }else{
            //Deactivate cheat when it is disabled from the GUI
            if (isActive){
                isActive = false;
                
                var HostData = AmongUsClient.Instance.GetHost();
                if (HostData != null && !HostData.Character.Data.Disconnected){
                    foreach (var item in PlayerControl.AllPlayerControls)
                    {
                        MessageWriter messageWriter = AmongUsClient.Instance.StartRpcImmediately(PlayerControl.LocalPlayer.NetId, (byte)RpcCalls.Shapeshift, SendOption.None, AmongUsClient.Instance.GetClientIdFromCharacter(item));
                        messageWriter.WriteNetObject(PlayerControl.LocalPlayer);
                        messageWriter.Write(!CheatSettings.noCooldowns);
                        AmongUsClient.Instance.FinishRpcImmediately(messageWriter);
                    }
                }
            }


            try{
                if (!PlayerControl.LocalPlayer.shapeshifting && PlayerControl.LocalPlayer.transform.localScale != PlayerControl.LocalPlayer.defaultCosmeticsScale){
                    PlayerControl.LocalPlayer.cosmetics.SetScale(PlayerControl.LocalPlayer.MyPhysics.Animations.DefaultPlayerScale, PlayerControl.LocalPlayer.defaultCosmeticsScale);
                }
            }catch{}
        }
    }
}